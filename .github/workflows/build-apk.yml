name: Build Flutter APK & AAB (Custom Name, Logo, Package Name Unik)

on:
  workflow_dispatch:
    inputs:
      weburl:
        description: 'WEB_URL untuk WebView'
        required: true
        default: 'https://example.com'
      appname:
        description: 'Nama aplikasi'
        required: true
        default: 'My Flutter App'
      applogo:
        description: 'URL logo PNG (512x512)'
        required: true
        default: 'https://example.com/logo.png'
      packname:
        description: 'Package name unik (contoh: com.example.app)'
        required: true
        default: 'com.example.myapp'
      uniqid:
        description: 'ID unik build'
        required: true
      chatid:
        description: 'Chat ID Telegram penerima APK'
        required: true
      bottoken:
        description: 'Bot Token Telegram'
        required: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout repo
      - uses: actions/checkout@v3

      # Setup Flutter
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.8'

      # Install dependencies
      - name: Install dependencies
        run: flutter pub get

      # Download custom logo
      - name: Download custom logo
        run: |
          mkdir -p assets/icon
          rm -f assets/icon/app_icon.png
          curl -L "${{ github.event.inputs.applogo }}" -o assets/icon/app_icon.png
          ls -lh assets/icon/app_icon.png

      # Generate launcher icons
      - name: Generate launcher icons
        run: flutter pub run flutter_launcher_icons

      # Replace app name in AndroidManifest.xml
      - name: Replace app name
        run: |
          sed -i 's/android:label="[^"]*"/android:label="${{ github.event.inputs.appname }}"/' android/app/src/main/AndroidManifest.xml

      # Replace applicationId only (tidak rename folder Kotlin/Java)
      - name: Replace applicationId only
        run: |
          sed -i "s/applicationId \".*\"/applicationId \"${{ github.event.inputs.packname }}\"/" android/app/build.gradle

      # Build APK
      - name: Build APK with custom WEB_URL
        run: flutter build apk --release --dart-define=WEB_URL=${{ github.event.inputs.weburl }}

      # Build AAB
      - name: Build AAB with custom WEB_URL
        run: flutter build appbundle --release --dart-define=WEB_URL=${{ github.event.inputs.weburl }}

      # Upload APK to server
      - name: Upload APK to server
        id: upload_apk
        run: |
          RESPONSE=$(curl -s -X POST "https://download.gravinity.my.id/upload.php" \
            -F "id=${{ github.event.inputs.uniqid }}" \
            -F "dokumen=@build/app/outputs/flutter-apk/app-release.apk")
          echo "$RESPONSE"
          echo "url_apk=$(echo $RESPONSE | jq -r '.file_url')" >> $GITHUB_OUTPUT

      # Upload AAB to server
      - name: Upload AAB to server
        id: upload_aab
        run: |
          RESPONSE=$(curl -s -X POST "https://download.gravinity.my.id/upload.php" \
            -F "id=${{ github.event.inputs.uniqid }}" \
            -F "dokumen=@build/app/outputs/bundle/release/app-release.aab")
          echo "$RESPONSE"
          echo "url_aab=$(echo $RESPONSE | jq -r '.file_url')" >> $GITHUB_OUTPUT

      # Send download links via Telegram
      - name: Send download links via Telegram Bot
        run: |
          MESSAGE="🚀 *${{ github.event.inputs.appname }}* berhasil dibuild!\n"
          MESSAGE+="🌐 WEB_URL: ${{ github.event.inputs.weburl }}\n"
          MESSAGE+="📦 Package Name: ${{ github.event.inputs.packname }}\n"
          MESSAGE+="🆔 Build ID: ${{ github.event.inputs.uniqid }}\n"
          MESSAGE+="📥 [Download APK](${{ steps.upload_apk.outputs.url_apk }})\n"
          MESSAGE+="📥 [Download AAB](${{ steps.upload_aab.outputs.url_aab }})"

          curl -s -X POST "https://api.telegram.org/bot${{ github.event.inputs.bottoken }}/sendMessage" \
            -d chat_id="${{ github.event.inputs.chatid }}" \
            -d text="$MESSAGE" \
            -d parse_mode="Markdown"
