name: Build Flutter APK & AAB with Custom Name, Logo, and Package Name

on:
  workflow_dispatch:
    inputs:
      weburl:
        description: 'WEB_URL untuk WebView'
        required: true
        default: 'https://example.com'
      appname:
        description: 'Nama aplikasi'
        required: true
        default: 'My Flutter App'
      applogo:
        description: 'URL logo PNG (512x512)'
        required: true
        default: 'https://example.com/logo.png'
      packname:
        description: 'Package name unik (contoh: com.example.app)'
        required: true
        default: 'com.example.myapp'
      uniqid:
        description: 'ID unik build'
        required: true
      chatid:
        description: 'Chat ID Telegram penerima APK'
        required: true
      bottoken:
        description: 'Bot Token Telegram'
        required: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.8' # pastikan sesuai yang didukung project

      - name: Install dependencies
        run: flutter pub get

      - name: Download custom logo
        run: |
          mkdir -p assets/icon
          curl -L "${{ github.event.inputs.applogo }}" -o assets/icon/app_icon.png
          ls -lh assets/icon/app_icon.png

      - name: Generate launcher icons
        run: flutter pub run flutter_launcher_icons

      - name: Replace app name in AndroidManifest.xml
        run: |
          sed -i 's/android:label="[^"]*"/android:label="${{ github.event.inputs.appname }}"/' android/app/src/main/AndroidManifest.xml

      - name: Replace package name
        run: |
          OLD_PACKAGE=$(grep -oP 'package="\K[^"]+' android/app/src/main/AndroidManifest.xml)
          sed -i "s/$OLD_PACKAGE/${{ github.event.inputs.packname }}/g" $(grep -rl "$OLD_PACKAGE" android/app/src)

          OLD_PATH="android/app/src/main/kotlin/$(echo $OLD_PACKAGE | tr . /)"
          NEW_PATH="android/app/src/main/kotlin/$(echo ${{ github.event.inputs.packname }} | tr . /)"
          mkdir -p "$NEW_PATH"
          mv "$OLD_PATH"/* "$NEW_PATH" || true
          rm -rf android/app/src/main/kotlin/*

      - name: Clean & Build APK
        run: |
          flutter clean
          flutter build apk --release --dart-define=WEB_URL=${{ github.event.inputs.weburl }}

      - name: Build AAB
        run: flutter build appbundle --release --dart-define=WEB_URL=${{ github.event.inputs.weburl }}

      - name: Upload APK
        id: upload_apk
        run: |
          RESPONSE=$(curl -s -X POST "https://download.gravinity.my.id/upload.php" \
            -F "id=${{ github.event.inputs.uniqid }}" \
            -F "dokumen=@build/app/outputs/flutter-apk/app-release.apk")
          echo "url_apk=$(echo $RESPONSE | jq -r '.file_url')" >> $GITHUB_OUTPUT

      - name: Upload AAB
        id: upload_aab
        run: |
          RESPONSE=$(curl -s -X POST "https://download.gravinity.my.id/upload.php" \
            -F "id=${{ github.event.inputs.uniqid }}" \
            -F "dokumen=@build/app/outputs/bundle/release/app-release.aab")
          echo "url_aab=$(echo $RESPONSE | jq -r '.file_url')" >> $GITHUB_OUTPUT

      - name: Send Telegram Notification
        run: |
          MESSAGE="🚀 *${{ github.event.inputs.appname }}* berhasil dibuild!\n"
          MESSAGE+="🌐 WEB_URL: ${{ github.event.inputs.weburl }}\n"
          MESSAGE+="📦 Package Name: ${{ github.event.inputs.packname }}\n"
          MESSAGE+="🆔 Build ID: ${{ github.event.inputs.uniqid }}\n"
          MESSAGE+="📥 [Download APK](${{ steps.upload_apk.outputs.url_apk }})\n"
          MESSAGE+="📥 [Download AAB](${{ steps.upload_aab.outputs.url_aab }})"

          curl -s -X POST "https://api.telegram.org/bot${{ github.event.inputs.bottoken }}/sendMessage" \
            -d chat_id="${{ github.event.inputs.chatid }}" \
            -d text="$MESSAGE" \
            -d parse_mode="Markdown"
